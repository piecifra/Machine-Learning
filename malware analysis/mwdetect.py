#!/usr/bin/env python3

import os, sys, random, time
from collections import defaultdict, Counter
from collections import Counter
import argparse
from decimal import *


all_features = ['api_call', 'permission', 'provider', 'intent', 'activity', 'call', 'service_receiver', 'real_permission', 'url', 'feature', 'service']
features = ['feature', 'permission', 'call', 'api_call', 'real_permission', 'intent']

# Instantiate the parser
parser = argparse.ArgumentParser(description='Malware Detection with Naive Bayes Classifier\n Dataset: DREBIN')

parser.add_argument('-n', default = len(os.listdir(FVDR)), type=int, nargs='?',
                    help='Set the total number of samples taken from Drebin')

parser.add_argument('-k', default = 10, type=int, nargs='?',
                    help='Set the number of iteration in the cross fold evaluation process')

parser.add_argument('--feature-vectors-path', default = './drebin/feature_vectors.nosync/', type=str,
                    help='Set path for feature vectors folder')

parser.add_argument('--sha256-family-path', default = './drebin/sha256_family.csv', type=str,
                    help='Set path for sha256_family.csv file')

parser.add_argument('--latex', default = False, action='store_true',
                    help='Print latex table of data')

args = parser.parse_args()

N = args.n
K = args.k

if N == None or K == None:
	parser.error('N or K cannot be None')


print()
print('------------------------------------------------------')
print('STARTING LEARINING PROCESS WITH ' + str(N) + ' SAMPLES')
print(str(K) + '-fold cross validation')
print('------------------------------------------------------')
print()
print()

df = defaultdict(tuple)	#dict[progr_sha] = (c, [manifest]) 
dm = defaultdict(list)	#dict[malware_family] = [malware_sha_list] 
malware_hash_list = []	#malware hash list from sha256_family.csv

final_accuracy = 0
final_precision = 0
final_recall = 0
final_f1score = 0


tj = {}
Pj = {}
Pij = {}
TFj = {}
TFij ={}

docs = {}				#dict[C] = {dict[progr_sha] = [manifest]}

C =['Malware', 'NonMalware'] 
V = []

print('Processing ' + SHAF)
with open(SHAF, 'r') as f:
	lines = f.readlines()[1:]

for a, b in [x.split(',') for x in lines]:
	malware_hash_list.append(a)

print('Processing feature_vectors.nosync')
files = os.listdir(FVDR)[:N]
#random.shuffle(files)
#random.shuffle(malware_hash_list)

for file in files[:N]:
	with open(FVDR + file, 'r') as f:
		lines = [x.strip('\n') for x in f.readlines() if x.split('::')[0]  in features]
	df[file] = lines

#Creating dictionary with (C, Manifest) of the file
for file in malware_hash_list:
	df[file] = ('Malware', df[file])

for file in df.keys():
	if not isinstance(df[file] , tuple):
		df[file] = ('NonMalware', df[file])

V = list(set([item for sublist in [df[x][1] for x in df.keys()] for item in sublist]))
print('|V| = ' + str(len(V)))

latex = ''

for i in range(K):

	tj = {}
	Pj = {}
	Pij = {}
	TFj = {}
	TFij ={}

	docs = {}				#dict[C] = {dict[progr_sha] = [manifest]}

	#test set contains 1/K samples
	test_set_start = int(N*i/K)
	test_set_end = int(N*(i+1)/K)

	test_set = files[test_set_start:test_set_end]
	dataset_learning = list(set(files)-set(test_set))

	print('Iteration ' + str(i) + ' - Learn Naive Bayes')

	for c in C:
		docs[c] = [df[x][1] for x in dataset_learning if df[x][0] == c]
		tj[c] = len(docs[c])
		Pj[c] = float(tj[c])/len(dataset_learning)
		TFj[c] = len([x for s in docs[c] for x in s])
		words_in_docs = Counter([item for sublist in docs[c] for item in sublist])
		for v in V:
			TFij[(v,c)] = words_in_docs[v]
			Pij[(v,c)] = float(TFij[(v,c)]+1)/(TFj[c] + len(V))

	print('Total programs: ' + str(len(docs['NonMalware'])))
	print('Total malware: ' + str(len(docs['Malware'])))


	TP = 0
	TN = 0
	FP = 0
	FN = 0

	print()
	print('Testing Data')

	malware_in_test = 0

	print('Size of test set: ' + str(len(test_set)))

	for file in test_set:
		if df[file][0] == 'Malware':
			malware_in_test += 1

		with open(FVDR + file, 'r') as f:
			lines = [x.strip('\n') for x in f.readlines() if x.split('::')[0] in features]

		max = 0
		ris = ''
		for c in C:
			p = Decimal(Pj[c])
			for l in lines:
				l = l.strip('\n')
				p = p * Decimal(Pij[(l,c)])
			if p >= max:
				max = p
				ris = c

		if ris == 'Malware' and file in malware_hash_list:
			TP += 1
		if ris == 'Malware' and file not in malware_hash_list:
			FP += 1
		if ris == 'NonMalware' and file not in malware_hash_list:
			TN += 1
		if ris == 'NonMalware' and file in malware_hash_list:
			FN += 1

	print('True positive ' + str(TP))
	print('True negative ' + str(TN))
	print('False positive ' + str(FP))
	print('False negative ' + str(FN))
	print('Malware in test set ' + str(malware_in_test))

	accuracy = float(TP+TN)/(TP+TN+FP+FN)
	recall = float(TP)/(TP+FN)
	precision = float(TP)/(TP+FP)
	if precision + recall != 0:
		f1score = 2*float(precision*recall)/(precision+recall)
	else:
		f1score = 0

	latex += str(i+1) + '&' + str(100*accuracy)[:5] + '\\%&' + str(recall)[:5] + '&' + str(precision)[:5] + '&' + str(f1score)[:5] + '\\\\' + '\n'

	final_accuracy += accuracy
	final_recall += recall
	final_precision += precision
	final_f1score += f1score

	print('Accuracy ' + str(100*accuracy) + '%')
	print('Recall ' + str(recall))
	print('Precision ' + str(precision))
	print('F1-Score ' + str(f1score))

	print()
	print()
	print()





final_accuracy = final_accuracy/K
final_recall = final_recall/K
final_precision = final_precision/K
final_f1score = final_f1score/K


print('Final Accuracy ' + str(final_accuracy) + '%')
print('Final Recall ' + str(final_recall))
print('Final Precision ' + str(final_precision))
print('Final F1-Score ' + str(final_f1score))

latex +=  '[1ex]\n\\hline\n'
latex += 'Final&' + str(100*final_accuracy)[:5] + '\\%&' + str(final_recall)[:5] + '&' + str(final_precision)[:5] + '&' + str(final_f1score)[:5] + '\\\\'

if args.__latex == True:
	print()
	print('Table for latex document')

	print('\\begin{table}[ht]\n\\centering')
	print('\\caption{' + str(K) + ' + -fold cross validation with ' + str(N) + ' samples considering the following features: ' + str(features).strip('[]').replace('\'','').replace('_', '\\_') + '}')
	print('\\begin{tabular}{c c c c c}')
	print('\\hline\\hline')
	print('Iteration & Accuracy & Recall & Precision & F1-Score \\\\ [0.5ex]')
	print('\\hline')
	print(latex)
	print('\\end{tabular}\n\\label{table:nonlin}\n\\end{table}')
